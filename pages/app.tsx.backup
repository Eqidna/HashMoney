import type { AppProps } from "next/app";
import {
  ThirdwebProvider,
  walletConnect,
  ConnectWallet,
  coinbaseWallet,
  localWallet,
  magicLink,
  metamaskWallet,
  paperWallet,
  safeWallet,
  smartWallet,
  useContract,
} from "@thirdweb-dev/react";
import {
  EthereumClassic,
  Ethereum,
  Binance,
  Polygon,
  Optimism,
  Dogechain,
  Arbitrum,
} from "@thirdweb-dev/chains";
import { Web3Button } from "@thirdweb-dev/react";
import "../styles/globals.css";
import React, { useEffect } from "react";
import { Container, Flex, ChakraProvider } from "@chakra-ui/react";
import Navbar from "../components/Navbar";

// Define your smart contract addresses
const contractAddresses = {
  contract1: {
    address: "0xContractAddress1",
    chain: "ethereum",
  },
  contract2: {
    address: "0xContractAddress2",
    chain: "polygon",
  },
  // Add more contracts on different chains here
};

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <div
      style={{
        background: "linear-gradient(to left, #FF3E00, #FF0000, #AA1111, #000000, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #000000, #AA1111, #FF0000, #FF3E00 )",
      }}
    >
      <ThirdwebProvider
        activeChain="ethereum" // Default active chain
        supportedChains={[
          EthereumClassic,
          Ethereum,
          Binance,
          Polygon,
          Optimism,
          Dogechain,
          Arbitrum,
        ]}
        supportedWallets={[
          metamaskWallet(),
          walletConnect(),
          coinbaseWallet(),
          safeWallet(),
        ]}
      >
        <ChakraProvider>
          <Navbar />
          <Component {...pageProps} />
        </ChakraProvider>
      </ThirdwebProvider>
    </div>
  );
}

function Component() {
  const { contract: contract1, isLoading: isLoading1 } = useContract(contractAddresses.contract1.address, contractAddresses.contract1.chain);
  const { contract: contract2, isLoading: isLoading2 } = useContract(contractAddresses.contract2.address, contractAddresses.contract2.chain);
  // Add more contracts on different chains here

  // Example usage
  useEffect(() => {
    if (!isLoading1 && contract1) {
      // Access contract methods and interact with it
      contract1.myMethod();
    }
  }, [isLoading1, contract1]);

  // Add more logic for other contracts on different chains

  return <div>My Component</div>;
}

export default MyApp;

Client ID pp
Identifies your application. It should generally be restricted to specific domains (web) and/or bundle-ids (native).
249b8123e743d58e62b3a721af430a68

Secret Key
Identifies and authenticates your application from the backend.
KHf_JEXK9g99LcVP4_ydo3lTtMTqdHOcCn2VSOXKD4BuvBZuQpEQrvCcnrHErLOCyt84ig1b6eY96aWg0dv95A

cid #mo
bc0102ed4e30c97c3b41ac8269fd9f11
seckey
gAgngywK34YCBVsfAUgEJY3WitMKD2kNXgE4D11G8jmMGez9H9AA9c_Hhnw2ojpxKOnHq9C89bo_JLSaTO276A
cid qdna
eb54bc7719937d0bb2c9c0693d42423c
seckey
Gyz8mFa67Ea7Q22_YIxaS_Z-pr9prTsnTVEtCTxWde2HMHiREvdIVI09HZNJBj-LR-zT_cAm2o6Mgy7LRTLQaQ